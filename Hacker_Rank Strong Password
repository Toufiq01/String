import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

public class Solution {
    static boolean isSpecialchar(char ch){
        if(ch == '!' || ch == '@' ||ch == '#'||ch == '$'|| ch=='%' || ch=='^'|| ch == '&'|| ch == '*'|| ch =='(' || ch ==')' || ch=='-'|| ch == '+'){
            return true;
        }
        else return false;
        
    }
    // Complete the minimumNumber function below.
    static int minimumNumber(int n, String password) {
        // Return the minimum number of characters to make the password strong
        char [] passArray = password.toCharArray();
        int disicount = 0, uppercount=0, lowercount =0, specialcount = 0, count = 0, m=0;
        for(int i=0; i<n ; i++){
            if(Character.isDigit(passArray[i])) disicount++;
            if(Character.isUpperCase(passArray[i])) uppercount++;
            if(Character.isLowerCase(passArray[i])) lowercount++;
            if(isSpecialchar(passArray[i])) specialcount++;
        }
        if(disicount <1) count++;
        if(uppercount<1) count++;
        if(lowercount<1) count++;
        if(specialcount<1) count++;
        if(n<6) {m= 6-n; }
        return Math.max(m,count);
        
    }

    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) throws IOException {
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int n = scanner.nextInt();
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

        String password = scanner.nextLine();

        int answer = minimumNumber(n, password);

        bufferedWriter.write(String.valueOf(answer));
        bufferedWriter.newLine();

        bufferedWriter.close();

        scanner.close();
    }
}
